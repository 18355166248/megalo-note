{"version":3,"file":"src_Comments_js.main.js","mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAAA;AAAA;AAEA;AAAA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAEA;AACA;AAGA;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AAAA;AAEA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://new-suspense-ssr/./src/Comments.js","webpack://new-suspense-ssr/./src/data.js"],"sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { useEffect, useState } from \"react\";\nimport { useData, fakeData } from \"./data\";\n\nexport default function Comments() {\n  // throw new Error();\n  const comments = useData(); // 这里在服务端渲染的时候会报错 报错的话会默认执行外层的 SusPense 的 fallback 进行渲染\n\n  // const [comments, setComments] = useState([]);\n\n  // useEffect(() => {\n  //   setTimeout(() => {\n  //     setComments(fakeData);\n  //   }, 1000);\n  // }, []);\n\n  return (\n    <>\n      {comments.map((comment, i) => (\n        <p className=\"comment\" key={i}>\n          {comment}\n        </p>\n      ))}\n    </>\n  );\n}\n","/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n */\n\nimport { createContext, useContext } from \"react\";\n\n// Note: this file does not demonstrate a real data fetching strategy.\n// We only use this to simulate data fetching happening on the server\n// while the cache is populated on the client. In a real app, you would\n// instead use a data fetching library or Server Components for this.\n\nconst DataContext = createContext(null);\n\nexport function DataProvider({ children, data }) {\n  return <DataContext.Provider value={data}>{children}</DataContext.Provider>;\n}\n\n// In a real implementation the data would be streamed with the HTML.\n// We haven't integrated this part yet, so we'll just use fake data.\nexport const fakeData = [\n  \"Wait, it doesn't wait for React to load?\",\n  \"How does this even work?\",\n  \"I like marshmallows\",\n];\n\n// 模拟接口延时\nexport function useData() {\n  const ctx = useContext(DataContext);\n  console.log(\"ctx\", ctx);\n  // ctx 在服务端渲染的时候  ctx.read 是一个异步函数 且会直接报错 也就是不会往下执行返回数据\n  // ctx 在客户端渲染的时候  ctx 是 null 也就不会报错 直接返回正确的数据了\n  if (ctx !== null) {\n    // This context is only provided on the server.\n    // It is here to simulate a suspending data fetch.\n    // 它在这里模拟挂起的数据提取 (其实就是报错 不往下执行了)\n    ctx.read();\n  }\n  return fakeData;\n}\n"],"names":[],"sourceRoot":""}